name: "[ARCHIVED] Production Deployment"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      version:
        description: 'Version to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspaces --include-workspace-root

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit -- --silent

      - name: Run integration tests
        run: npm run test:integration -- --silent

      - name: Run security tests
        run: npm run test:security -- --silent

      - name: Generate test coverage
        run: npm run test:coverage -- --silent

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.gofly
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUN_CONFIG_MIGRATION=false

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.autoads.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build.outputs.image }} to staging"
          # Add staging deployment commands here

      - name: Run smoke tests
        run: |
          npm ci --workspaces --include-workspace-root
          npm run test:smoke -- --silent
        env:
          STAGING_URL: https://staging.autoads.com

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed: ${{ needs.build.outputs.image }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://autoads.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Go database migrations (Production via env URL)
        if: ${{ secrets.PROD_DATABASE_URL != '' }}
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PROD_REDIS_URL }}
        run: npm run migrate:backend

      - name: Setup ClawCloud CLI
        run: |
          curl -fsSL https://cli.clawcloud.com/install.sh | sh
          clawcloud auth login --token ${{ secrets.CLAWCLOUD_TOKEN }}

      - name: Blue-Green Deployment
        id: deploy
        run: |
          # Create new deployment (green)
          DEPLOYMENT_ID=$(clawcloud deploy create \
            --image ${{ needs.build.outputs.image }} \
            --environment production \
            --strategy blue-green \
            --health-check /api/health \
            --output json | jq -r '.id')
          
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          
          # Wait for deployment to be ready
          clawcloud deploy wait $DEPLOYMENT_ID --timeout 600
          
          # Run health checks
          clawcloud deploy health-check $DEPLOYMENT_ID
          
          # Switch traffic to green deployment
          clawcloud deploy activate $DEPLOYMENT_ID

      - name: Run post-deployment tests
        run: |
          npm ci --workspaces --include-workspace-root
          npm run test:post-deploy -- --silent
        env:
          PRODUCTION_URL: https://autoads.com

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes after deployment
          clawcloud deploy monitor ${{ steps.deploy.outputs.deployment_id }} --duration 300

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback"
          clawcloud deploy rollback ${{ steps.deploy.outputs.deployment_id }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ Production deployment successful!
            Version: ${{ github.ref_name }}
            Image: ${{ needs.build.outputs.image }}
            Deployment ID: ${{ steps.deploy.outputs.deployment_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå Production deployment failed!
            Version: ${{ github.ref_name }}
            Image: ${{ needs.build.outputs.image }}
            Please check the logs and consider manual intervention.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --workspaces --include-workspace-root

      - name: Run performance tests
        run: npm run test:performance -- --silent
        env:
          TARGET_URL: https://staging.autoads.com

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
