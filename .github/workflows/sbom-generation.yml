name: SBOM Generation and Analysis

on:
  workflow_run:
    workflows: ["Optimized Docker Build with CI/CD Pipeline"]
    types:
      - completed
    branches: [main, production]

  workflow_dispatch:
    inputs:
      image_digest:
        description: 'Image digest to analyze'
        required: true
        type: string
      platform:
        description: 'Platform to analyze'
        required: false
        default: 'linux-amd64'
        type: choice
        options:
        - linux-amd64
        - linux-arm64

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: read

jobs:
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Determine image tag and digest
      id: image-info
      env:
        EVENT_NAME: ${{ github.event_name }}
        INPUT_IMAGE_DIGEST: ${{ github.event.inputs.image_digest }}
        INPUT_PLATFORM: ${{ github.event.inputs.platform }}
      run: |
        if [ "$EVENT_NAME" == "workflow_dispatch" ]; then
          echo "digest=$INPUT_IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "platform=$INPUT_PLATFORM" >> $GITHUB_OUTPUT
        else
          # Get the latest image digest from the workflow run
          echo "Fetching image information from workflow run..."
          # Note: In a real scenario, you might need to fetch this from the workflow artifacts
          echo "digest=latest" >> $GITHUB_OUTPUT
          echo "platform=linux-amd64" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0.17.2
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.digest }}
        format: cyclonedx-json
        output-file: sbom-cyclonedx.json
        
    - name: Generate SBOM in SPDX format
      uses: anchore/sbom-action@v0.17.2
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.digest }}
        format: spdx-json
        output-file: sbom-spdx.json
        
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ steps.image-info.outputs.platform }}
        path: |
          sbom-cyclonedx.json
          sbom-spdx.json
        retention-days: 90
        
    - name: Generate SBOM summary
      run: |
        echo "## 📋 SBOM Generation Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Format | File | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CycloneDX | sbom-cyclonedx.json | ✅ Generated |" >> $GITHUB_STEP_SUMMARY
        echo "| SPDX | sbom-spdx.json | ✅ Generated |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: ${{ steps.image-info.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ steps.image-info.outputs.platform }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on PR with SBOM info
      if: github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.workflow_run.pull_requests[0].number
          });
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            body: `## 🔍 SBOM Generated
            
            Software Bill of Materials (SBOM) has been generated for the Docker image:
            
            - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.digest }}\`
            - **Formats**: CycloneDX, SPDX
            - **Platform**: ${{ steps.image-info.outputs.platform }}
            
            The SBOM artifacts are available in the workflow run summary.
            `
          });

  analyze-vulnerabilities:
    name: Analyze Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: generate-sbom
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-${{ github.event.inputs.platform }}
        
    - name: Analyze vulnerabilities with Grype
      uses: anchore/scan-action@v4
      with:
        sbom-file: sbom-cyclonedx.json
        format: sarif
        output: grype-results.sarif
        
    - name: Save vulnerability scan results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grype-vulnerability-results
        path: grype-results.sarif
        retention-days: 30
        
    - name: Generate vulnerability report
      run: |
        echo "## 🔍 Vulnerability Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Vulnerability analysis completed using Grype with SBOM input." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
        echo "2. Address any critical or high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "3. Update dependencies as needed" >> $GITHUB_STEP_SUMMARY