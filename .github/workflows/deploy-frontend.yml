name: Deploy Frontend (Firebase Hosting)

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]
  workflow_dispatch:

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  ARTIFACT_REPO: ${{ vars.ARTIFACT_REPO || 'autoads-services' }}
  ARTIFACT_LOCATION: ${{ vars.GCP_REGION }}

jobs:
  meta:
    name: Prepare metadata
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      primary_tag: ${{ steps.determine.outputs.primary_tag }}
      secondary_tag: ${{ steps.determine.outputs.secondary_tag }}
      short_sha: ${{ steps.determine.outputs.short_sha }}
      target: ${{ steps.determine.outputs.target }}
    steps:
      - name: Determine environment, tags, hosting target
        id: determine
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          REF="$GITHUB_REF"
          if [[ "$REF" == refs/tags/* ]]; then
            ENVIRONMENT="prod"; TAG_NAME="${REF#refs/tags/}";
            PRIMARY_TAG="prod-${TAG_NAME}"; SECONDARY_TAG="prod-${SHORT_SHA}"; TARGET="autoads-prod"
          elif [[ "$REF" == "refs/heads/production" ]]; then
            ENVIRONMENT="prod"; PRIMARY_TAG="prod-${SHORT_SHA}"; SECONDARY_TAG="prod-latest"; TARGET="autoads-prod"
          else
            ENVIRONMENT="preview"; PRIMARY_TAG="preview-${SHORT_SHA}"; SECONDARY_TAG="preview-latest"; TARGET="autoads-preview"
          fi
          echo "environment=${ENVIRONMENT}" >> "$GITHUB_OUTPUT"
          echo "primary_tag=${PRIMARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "secondary_tag=${SECONDARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"

  build-image:
    name: Build frontend image (Cloud Build)
    runs-on: ubuntu-latest
    needs: meta
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Cloud Build submit
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend:${{ needs.meta.outputs.primary_tag }}"
          echo "Submitting Cloud Build for ${IMAGE}"
          CONFIG_PATH="$GITHUB_WORKSPACE/deployments/cloudbuild/build-frontend-docker.yaml"
          ls -l "$CONFIG_PATH" || { echo "Config not found at $CONFIG_PATH" >&2; exit 1; }
          BUILD_NAME=$(gcloud builds submit . \
            --project "${PROJECT_ID}" \
            --config "$CONFIG_PATH" \
            --gcs-log-dir gs://autoads-build-logs-asia-northeast1/logs \
            --substitutions _IMAGE="${IMAGE}" \
            --async --format='value(name)')
          BUILD_ID="${BUILD_NAME##*/}"
          if [[ -z "$BUILD_ID" ]]; then echo "Failed to parse build id" >&2; exit 1; fi
          for i in $(seq 1 180); do
            STATUS=$(gcloud builds describe "$BUILD_ID" --project "$PROJECT_ID" --format='value(status)' || true)
            echo "Build $BUILD_ID status: $STATUS";
            case "$STATUS" in SUCCESS) break;; FAILURE|CANCELLED|TIMEOUT|EXPIRED) exit 1;; esac
            sleep 10; done

  tag-image:
    name: Tag image (secondary)
    runs-on: ubuntu-latest
    needs: [meta, build-image]
    if: ${{ needs.meta.outputs.secondary_tag != '' }}
    steps:
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Add secondary tag
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE_BASE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend"
          gcloud container images add-tag \
            "${IMAGE_BASE}:${{ needs.meta.outputs.primary_tag }}" \
            "${IMAGE_BASE}:${{ needs.meta.outputs.secondary_tag }}" \
            --quiet --project "${PROJECT_ID}"

  deploy-cloudrun:
    name: Deploy Cloud Run frontend
    runs-on: ubuntu-latest
    needs: [meta, build-image]
    steps:
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Deploy service
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend:${{ needs.meta.outputs.primary_tag }}"
          gcloud run deploy frontend \
            --image "$IMAGE" \
            --region "${REGION:-asia-northeast1}" \
            --platform managed \
            --allow-unauthenticated \
            --project "${PROJECT_ID}"

  deploy-hosting:
    name: Deploy Firebase Hosting
    runs-on: ubuntu-latest
    needs: [meta, deploy-cloudrun]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: '${{ vars.GCP_PROJECT_ID }}'
          target: '${{ needs.meta.outputs.target }}'

  summary:
    name: Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [meta, build-image, deploy-cloudrun]
    steps:
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Summarize endpoints
        shell: bash
        run: |
          set -euo pipefail
          REGION="${{ env.REGION }}"; REGION="${REGION:-asia-northeast1}"
          RUN_URL=$(gcloud run services describe frontend --region "$REGION" --format='value(status.url)' || true)
          REV_NAME=$(gcloud run services describe frontend --region "$REGION" --format='value(status.latestReadyRevisionName)' || true)
          IMAGE=$(gcloud run services describe frontend --region "$REGION" --format='value(spec.template.spec.containers[0].image)' || true)
          TARGET='${{ needs.meta.outputs.target }}'
          DEFAULT_URL="https://${TARGET}.web.app"
          if [[ "$TARGET" == "autoads-preview" ]]; then
            CUSTOM_URL="https://www.urlchecker.dev (if configured)"
          else
            CUSTOM_URL="https://www.autoads.dev (if configured)"
          fi
          {
            echo "## Frontend Deploy Summary"
            echo "- Cloud Run URL: ${RUN_URL:-N/A}"
            echo "- Cloud Run Revision: ${REV_NAME:-N/A}"
            echo "- Deployed Image: ${IMAGE:-N/A}"
            echo "- Hosting Target: ${TARGET}"
            echo "- Hosting Default: ${DEFAULT_URL}"
            echo "- Hosting Custom:  ${CUSTOM_URL}"
          } >> "$GITHUB_STEP_SUMMARY"
