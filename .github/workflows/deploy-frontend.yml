name: Deploy Frontend (Firebase Hosting)

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]
  workflow_dispatch:

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  ARTIFACT_REPO: ${{ vars.ARTIFACT_REPO || 'autoads-services' }}
  ARTIFACT_LOCATION: ${{ vars.GCP_REGION }}

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/frontend/package-lock.json

      - name: Install Dependencies (frontend only)
        run: |
          cd apps/frontend
          npm ci

      - name: Build (frontend only)
        run: |
          cd apps/frontend
          npm run build

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Determine environment and tags
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          REF="$GITHUB_REF"
          if [[ "$REF" == refs/tags/* ]]; then
            ENVIRONMENT="prod"
            TAG_NAME="${REF#refs/tags/}"
            PRIMARY_TAG="prod-${TAG_NAME}"
            SECONDARY_TAG="prod-${SHORT_SHA}"
          elif [[ "$REF" == "refs/heads/production" ]]; then
            ENVIRONMENT="prod"
            PRIMARY_TAG="prod-${SHORT_SHA}"
            SECONDARY_TAG="prod-latest"
          else
            ENVIRONMENT="preview"
            PRIMARY_TAG="preview-${SHORT_SHA}"
            SECONDARY_TAG="preview-latest"
          fi
          echo "environment=${ENVIRONMENT}" >> "$GITHUB_OUTPUT"
          echo "primary_tag=${PRIMARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "secondary_tag=${SECONDARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build frontend image (Cloud Build)
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend:${{ steps.meta.outputs.primary_tag }}"
          echo "Submitting Cloud Build for ${IMAGE} via build-frontend-docker.yaml"
          BUILD_NAME=$(gcloud builds submit . \
            --project "${PROJECT_ID}" \
            --config ./deployments/cloudbuild/build-frontend-docker.yaml \
            --substitutions _IMAGE="${IMAGE}" \
            --async --format='value(name)')
          BUILD_ID="${BUILD_NAME##*/}"
          if [[ -z "$BUILD_ID" ]]; then echo "Failed to parse build id" >&2; exit 1; fi
          for i in $(seq 1 180); do
            STATUS=$(gcloud builds describe "$BUILD_ID" --project "$PROJECT_ID" --format='value(status)' || true)
            echo "Build $BUILD_ID status: $STATUS";
            case "$STATUS" in SUCCESS) break;; FAILURE|CANCELLED|TIMEOUT|EXPIRED) exit 1;; esac
            sleep 10; done

      - name: Add secondary tag (no rebuild)
        if: ${{ steps.meta.outputs.secondary_tag != '' }}
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE_BASE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend"
          gcloud container images add-tag \
            "${IMAGE_BASE}:${{ steps.meta.outputs.primary_tag }}" \
            "${IMAGE_BASE}:${{ steps.meta.outputs.secondary_tag }}" \
            --quiet --project "${PROJECT_ID}"

      - name: Deploy Cloud Run (frontend)
        shell: bash
        run: |
          set -euo pipefail
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/frontend:${{ steps.meta.outputs.primary_tag }}"
          gcloud run deploy frontend \
            --image "$IMAGE" \
            --region "${REGION:-asia-northeast1}" \
            --platform managed \
            --allow-unauthenticated \
            --project "${PROJECT_ID}"

      - name: Decide Hosting target
        id: decide
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/heads/main ]]; then
            TARGET="autoads-preview"
          else
            TARGET="autoads-prod"
          fi
          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: '${{ vars.GCP_PROJECT_ID }}'
          target: '${{ steps.decide.outputs.target }}'
        # No frameworks deploy; Hosting rewrites to Cloud Run service

      - name: Summarize Hosting URL
        shell: bash
        run: |
          TARGET='${{ steps.decide.outputs.target }}'
          DEFAULT_URL="https://${TARGET}.web.app"
          if [[ "$TARGET" == "autoads-preview" ]]; then
            CUSTOM_URL="https://www.urlchecker.dev (if configured)"
          else
            CUSTOM_URL="https://www.autoads.dev (if configured)"
          fi
          {
            echo "## Frontend Hosting"
            echo "- Target:  ${TARGET}"
            echo "- Default: ${DEFAULT_URL}"
            echo "- Custom:  ${CUSTOM_URL}"
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Cache Turbo build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/frontend/.next/cache
          key: ${{ runner.os }}-turbo-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ github.ref }}-
            ${{ runner.os }}-turbo-
