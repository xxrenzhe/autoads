name: AutoAds Single CI (amd64)

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: xxrenzhe/autoads

permissions:
  contents: read
  packages: write

jobs:
  validate-ts:
    name: Quick Validation - TS
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Prisma engines
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('apps/frontend/prisma/schema.prisma') }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies (root workspaces)
        run: npm ci --workspaces --include-workspace-root --ignore-scripts

      - name: Generate Prisma Client
        run: cd apps/frontend && npx prisma generate

      - name: TypeScript type check (frontend)
        run: ./scripts/type-check-simple.sh

  validate-db:
    name: Quick Validation - DB
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      GOPROXY: https://proxy.golang.org,direct
      GOSUMDB: sum.golang.org
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: autoads_ci
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -ppassword"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 3306:3306
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: true
          cache-dependency-path: gofly_admin_v3/go.sum

      - name: Build Go migrate binary (minimal)
        run: |
          cd gofly_admin_v3
          go build -v -trimpath -buildvcs=false -ldflags "-s -w" -o migrate-ci ./cmd/migrate

      # 依赖 services 健康检查，无需额外等待步骤

      - name: Run Go database migrations (CI via env URL)
        env:
          DATABASE_URL: mysql://root:password@127.0.0.1:3306/autoads_ci
          REDIS_URL: redis://127.0.0.1:6379/0
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for MySQL(127.0.0.1:3306) and Redis(127.0.0.1:6379) ..."
          for i in {1..90}; do (echo > /dev/tcp/127.0.0.1/3306) >/dev/null 2>&1 && break; sleep 1; done
          for i in {1..60}; do (echo > /dev/tcp/127.0.0.1/6379) >/dev/null 2>&1 && break; sleep 1; done
          echo "Ports ready. Running migrations..."
          cd gofly_admin_v3
          # 以文件收集输出，并设置成功哨兵字符串
          SUCCESS_SENTINEL="数据库初始化完成"
          set +e
          ./migrate-ci > migrate.out 2>&1 &
          pid=$!
          # 轮询输出，最多等待 300s（5 分钟）
          for i in {1..300}; do
            if grep -q "$SUCCESS_SENTINEL" migrate.out; then
              echo "Detected success sentinel: $SUCCESS_SENTINEL"
              # 进程可能尚未退出，确保结束它（忽略失败）
              kill "$pid" >/dev/null 2>&1 || true
              wait "$pid" >/dev/null 2>&1 || true
              cat migrate.out
              exit 0
            fi
            if ! kill -0 "$pid" >/dev/null 2>&1; then
              echo "Process exited. Printing output:"
              cat migrate.out
              # 进程自行退出（成功或失败），以其退出码为准
              wait "$pid"; exit $?
            fi
            sleep 1
          done
          echo "Timeout waiting for success sentinel within 300s; killing process..."
          kill "$pid" >/dev/null 2>&1 || true
          sleep 2
          kill -KILL "$pid" >/dev/null 2>&1 || true
          echo "--- migrate.out (truncated) ---"
          tail -n 500 migrate.out || true
          exit 1

  build-and-push:
    name: Build and Push (linux/amd64)
    runs-on: ubuntu-latest
    needs: [validate-db, validate-ts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # main -> preview-latest
            type=raw,value=preview-latest,enable=${{ github.ref == 'refs/heads/main' }}
            # production -> prod-latest
            type=raw,value=prod-latest,enable=${{ github.ref == 'refs/heads/production' }}
            # tag v* -> prod-{tag-without-v}
            type=match,pattern=v(.*),group=1,prefix=prod-,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Determine build args (per MustKnow.md)
        id: build-args
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "NEXT_PUBLIC_DEPLOYMENT_ENV=production" >> $GITHUB_OUTPUT
            echo "NEXT_PUBLIC_DOMAIN=autoads.dev" >> $GITHUB_OUTPUT
            BASE_DOMAIN=autoads.dev
          else
            echo "NEXT_PUBLIC_DEPLOYMENT_ENV=preview" >> $GITHUB_OUTPUT
            echo "NEXT_PUBLIC_DOMAIN=urlchecker.dev" >> $GITHUB_OUTPUT
            BASE_DOMAIN=urlchecker.dev
          fi
          WWW_DOMAIN="www.${BASE_DOMAIN}"
          echo "ALLOW_ORIGINS=https://${BASE_DOMAIN},https://${WWW_DOMAIN}" >> $GITHUB_OUTPUT
          echo "GOOGLE_REDIRECT_URI=https://${WWW_DOMAIN}/auth/google/callback" >> $GITHUB_OUTPUT
          # Extra build args for reproducible versioning / cache-bust
          echo "BUILD_TS=$(date -u +%FT%TZ)" >> $GITHUB_OUTPUT
          echo "CACHE_BUST=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push image (linux/amd64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.standalone
          platforms: linux/amd64
          push: true
          no-cache: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_DEPLOYMENT_ENV=${{ steps.build-args.outputs.NEXT_PUBLIC_DEPLOYMENT_ENV }}
            NEXT_PUBLIC_DOMAIN=${{ steps.build-args.outputs.NEXT_PUBLIC_DOMAIN }}
            ALLOW_ORIGINS=${{ steps.build-args.outputs.ALLOW_ORIGINS }}
            GOOGLE_REDIRECT_URI=${{ steps.build-args.outputs.GOOGLE_REDIRECT_URI }}
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_TS=${{ steps.build-args.outputs.BUILD_TS }}
            CACHE_BUST=${{ steps.build-args.outputs.CACHE_BUST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "## ✅ Build summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- Digest: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platform: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- Env: ${{ steps.build-args.outputs.NEXT_PUBLIC_DEPLOYMENT_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- Domain: ${{ steps.build-args.outputs.NEXT_PUBLIC_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- No cache: true" >> $GITHUB_STEP_SUMMARY

      - name: Deploy summary (ClawCloud copy-paste)
        run: |
          echo "## 🚀 Deploy on ClawCloud" >> $GITHUB_STEP_SUMMARY
          echo "Use the following image tag+digest to avoid cache ambiguity:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for TAG in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            echo "- ghcr.io/xxrenzhe/autoads:${TAG#*/} @ ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pull explicitly:" >> $GITHUB_STEP_SUMMARY
          echo "\n\`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\nThen select this digest in ClawCloud or ensure Always Pull is enabled." >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: tag
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "image_tag=preview-latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "image_tag=prod-latest" >> $GITHUB_OUTPUT
          else
            # refs/tags/v*
            NAME="${GITHUB_REF_NAME}"
            NAME_WITHOUT_V="${NAME#v}"
            echo "image_tag=prod-${NAME_WITHOUT_V}" >> $GITHUB_OUTPUT
          fi

      - name: Pull image for scanning
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.image_tag }}

      - name: Run Trivy (critical only)
        id: trivy
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL'
          vuln-type: 'os,library'
          timeout: '8m'

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-trivy-scan-results
          path: trivy-results.sarif
          retention-days: 14
