name: Comprehensive Security Scan

on:
  # Run only on scheduled scans and manual dispatch
  schedule:
    # Run comprehensive security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency scanning moved to code-quality.yml to avoid redundancy

  # CodeQL analysis disabled - requires GitHub Advanced Security
  # Enable by uncommenting if GitHub Advanced Security is available
  # code-scan:
  #   name: Static Code Analysis
  #   runs-on: ubuntu-latest
  # 
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  # 
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  # 
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: javascript
  # 
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3
  # 
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  # 
  #     - name: Run Semgrep
  #       uses: returntocorp/semgrep-action@v1
  #       with:
  #         config: >-
  #           p/security-audit
  #           p/secrets
  #           p/owasp-top-ten
  #           p/javascript
  #           p/typescript

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: security-scan:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Save Trivy scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-results
          path: 'trivy-results.sarif'
          retention-days: 30

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security || true

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Save Checkov scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-security-results
          path: checkov-results.sarif
          retention-days: 30

      - name: Scan Kubernetes manifests
        if: hashFiles('k8s/**/*.yaml') != ''
        run: |
          # Install kube-score
          curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz | tar xz
          sudo mv kube-score /usr/local/bin/
          
          # Scan Kubernetes manifests
          find k8s -name "*.yaml" -exec kube-score score {} \;

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, docker-security, infrastructure-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Add job statuses
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Docker Security: ${{ needs.docker-security.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });