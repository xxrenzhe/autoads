name: Deploy Backend (Cloud Run)

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'scripts/deploy/cloudrun-deploy.sh'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch: {}

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'asia-northeast1' }}
  REPO: autoads-services

jobs:
  detect:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed services
        id: detect
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha || github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
          CHANGED=$(BASE_SHA="$BASE_SHA" HEAD_SHA="$HEAD_SHA" bash scripts/deploy/detect-changed-services.sh)
          echo "services=$CHANGED" >> $GITHUB_OUTPUT
          echo "Changed services: $CHANGED"

  deploy:
    name: Build & Deploy Changed Services
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.services != '[]'
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect.outputs.services) }}
    
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: Enable required services (idempotent)
        run: |
          gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com

      - name: Configure Artifact Registry Docker
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build & Deploy (Cloud Build + Cloud Run)
        env:
          GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
          REGION: ${{ env.REGION }}
          REPO: ${{ env.REPO }}
          SERVICES: ${{ matrix.service }}
        run: |
          echo "Deploying service: $SERVICES"
          bash scripts/deploy/cloudrun-deploy.sh

  gateway:
    name: Render & Deploy Gateway + Smoke
    runs-on: ubuntu-latest
    needs: deploy
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Render gateway.yaml to actual URLs
        env:
          GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
          REGION: ${{ env.REGION }}
        run: |
          bash scripts/deploy/render-gateway.sh

      - name: Deploy API Gateway (ensure up-to-date)
        env:
          GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
          REGION: ${{ env.REGION }}
        run: |
          bash scripts/deploy/gateway-deploy.sh

      - name: Retrieve Gateway hostname
        id: gw
        run: |
          host=$(gcloud api-gateway gateways describe autoads-gw --location=${{ env.REGION }} --format='value(defaultHostname)')
          echo "host=$host" >> $GITHUB_OUTPUT
          echo "Gateway Host: $host"

      - name: E2E Smoke via API Gateway
        env:
          GATEWAY_HOST: ${{ steps.gw.outputs.host }}
          FIREBASE_ID_TOKEN: ${{ secrets.FIREBASE_TEST_ID_TOKEN }}
        run: |
          if [ -z "$GATEWAY_HOST" ]; then echo "No gateway host found"; exit 1; fi
          if [ -n "$FIREBASE_ID_TOKEN" ]; then
            GATEWAY_HOST="$GATEWAY_HOST" bash scripts/tests/gateway-smoke.sh "$FIREBASE_ID_TOKEN"
          else
            echo "No FIREBASE_TEST_ID_TOKEN provided; running partial smoke"
            GATEWAY_HOST="$GATEWAY_HOST" bash scripts/tests/gateway-smoke.sh || true
          fi
