name: Deploy Backend (Cloud Build â†’ Cloud Run)

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  ARTIFACT_REPO: ${{ vars.ARTIFACT_REPO || 'autoads-services' }}
  ARTIFACT_LOCATION: ${{ vars.GCP_REGION }}

jobs:
  changes:
    name: Detect changed services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed services
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Force full deploy when building a tag (release)
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            services='["identity","billing","offer","workflow","siterank","adscenter","batchopen","console"]'
            echo "Tag build detected (${GITHUB_REF}); forcing full deploy: $services"
          else
            BASE_SHA="${{ github.event.before || '' }}"
            HEAD_SHA="${{ github.sha }}"
            export BASE_SHA HEAD_SHA
            services=$(bash scripts/deploy/detect-changed-services.sh)
          fi
          echo "Detected services: $services"
          echo "services=$services" >> "$GITHUB_OUTPUT"

  deploy-services:
    name: Build and Deploy Services
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.changes.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 420.0.0'

      - name: Determine environment and tags
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          REF="$GITHUB_REF"
          if [[ "$REF" == refs/tags/* ]]; then
            ENVIRONMENT="prod"
            TAG_NAME="${REF#refs/tags/}"
            PRIMARY_TAG="prod-${TAG_NAME}"
            SECONDARY_TAG="prod-${SHORT_SHA}"
          elif [[ "$REF" == "refs/heads/production" ]]; then
            ENVIRONMENT="prod"
            PRIMARY_TAG="prod-${SHORT_SHA}"
            SECONDARY_TAG="prod-latest"
          else
            ENVIRONMENT="preview"
            PRIMARY_TAG="preview-${SHORT_SHA}"
            SECONDARY_TAG="preview-latest"
          fi
          echo "environment=${ENVIRONMENT}" >> "$GITHUB_OUTPUT"
          echo "primary_tag=${PRIMARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "secondary_tag=${SECONDARY_TAG}" >> "$GITHUB_OUTPUT"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build with Cloud Build (primary tag)
        shell: bash
        run: |
          set -euo pipefail
          SERVICE="${{ matrix.service }}"
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/${SERVICE}"
          PRIMARY_TAG="${{ steps.meta.outputs.primary_tag }}"
          # Service path (frontend Cloud Run is in hosting/, others in services/<name>)
          SERVICE_PATH="services/${SERVICE}"
          if [[ "$SERVICE" == "frontend" ]]; then SERVICE_PATH="hosting"; fi
          LOG_BUCKET="gs://autoads-build-logs-asia-northeast1"
          echo "Submitting Cloud Build for ${IMAGE}:${PRIMARY_TAG} from ${SERVICE_PATH} (logs: ${LOG_BUCKET})"
          SUBMIT_OUTPUT=$(gcloud builds submit "${SERVICE_PATH}" \
            --project "${PROJECT_ID}" \
            --tag "${IMAGE}:${PRIMARY_TAG}" \
            --gcs-log-dir="${LOG_BUCKET}" \
            --async 2>&1 | tee /dev/stderr || true)
          BUILD_ID=$(printf "%s" "$SUBMIT_OUTPUT" | grep -Eo 'builds/[a-f0-9-]+' | sed 's#builds/##' | tail -n1)
          if [[ -z "$BUILD_ID" ]]; then
            echo "ERROR: Failed to parse Cloud Build ID from submit output" >&2
            exit 1
          fi
          echo "Cloud Build ID: $BUILD_ID"
          # Poll for completion without streaming logs (avoids VPC-SC restrictions)
          ATTEMPTS=0
          while :; do
            STATUS=$(gcloud builds describe "$BUILD_ID" --project "$PROJECT_ID" --format='value(status)' || true)
            echo "Build $BUILD_ID status: $STATUS"
            case "$STATUS" in
              SUCCESS)
                break;;
              FAILURE|CANCELLED|TIMEOUT|EXPIRED)
                echo "Cloud Build failed with status: $STATUS (ID: $BUILD_ID)" >&2
                echo "View logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$(gcloud config get-value core/project)" >&2
                exit 1;;
              *)
                :;;
            esac
            ATTEMPTS=$((ATTEMPTS+1))
            if [[ $ATTEMPTS -gt 180 ]]; then
              echo "ERROR: Timed out waiting for Cloud Build (30m)" >&2
              exit 1
            fi
            sleep 10
          done

      - name: Add secondary tag (no rebuild)
        if: ${{ steps.meta.outputs.secondary_tag != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SERVICE="${{ matrix.service }}"
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/${SERVICE}"
          PRIMARY_TAG="${{ steps.meta.outputs.primary_tag }}"
          SECONDARY_TAG="${{ steps.meta.outputs.secondary_tag }}"
          echo "Tagging ${IMAGE}:${PRIMARY_TAG} -> ${IMAGE}:${SECONDARY_TAG}"
          gcloud container images add-tag "${IMAGE}:${PRIMARY_TAG}" "${IMAGE}:${SECONDARY_TAG}" --quiet --project "${PROJECT_ID}"

      - name: Deploy to Cloud Run
        shell: bash
        run: |
          set -euo pipefail
          SERVICE="${{ matrix.service }}"
          AR_HOST="${ARTIFACT_LOCATION:-asia-northeast1}-docker.pkg.dev"
          IMAGE="${AR_HOST}/${PROJECT_ID}/${ARTIFACT_REPO}/${SERVICE}:${{ steps.meta.outputs.primary_tag }}"
          echo "Deploying ${SERVICE} with image ${IMAGE} to ${REGION}"
          gcloud run deploy "${SERVICE}" \
            --image "${IMAGE}" \
            --region "${REGION:-asia-northeast1}" \
            --platform managed \
            --allow-unauthenticated \
            --project "${PROJECT_ID}"
