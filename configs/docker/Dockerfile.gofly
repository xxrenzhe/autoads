# GoFly Admin V3 + Next.js 多架构 Dockerfile
# 支持 Go 后端和 Next.js 前端的联合构建
# 遵循简单实用原则，支持2C4G环境

# Go 构建阶段
FROM golang:1.21-alpine AS go-builder

# 安装必要的系统依赖
RUN apk add --no-cache \
    git \
    build-base \
    tzdata

WORKDIR /go/src/app

# 复制 Go mod 文件
COPY gofly_admin_v3/go.mod gofly_admin_v3/go.sum ./

# 下载依赖
RUN go mod download

# 复制 Go 源代码
COPY gofly_admin_v3/ .

# 构建 Go 应用
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Next.js 基础镜像
FROM node:22-alpine AS base

# 安装必要的系统依赖
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    # Chrome dependencies for Puppeteer
    chromium \
    nss \
    freetype \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 依赖安装阶段
FROM base AS deps

# 复制依赖文件
COPY package.json package-lock.json ./

# 优化npm配置以加速安装
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true && \
    npm config set maxsockets 20

# 安装生产依赖（内存优化）
ENV NODE_OPTIONS="--max-old-space-size=1024"
RUN npm ci --only=production --no-audit --no-fund --prefer-offline

# 构建阶段
FROM base AS builder

# 优化npm配置
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true && \
    npm config set maxsockets 20

# 安装所有依赖（包括devDependencies用于构建）
COPY package.json package-lock.json ./
RUN npm ci --no-audit --no-fund --prefer-offline

# 复制 Prisma schema
COPY prisma ./prisma

# 生成 Prisma 客户端
RUN npx prisma generate

# 复制源代码
COPY . .

# 运行安全检查
RUN echo "🔍 运行安全检查..." && \
    chmod +x scripts/security-check.sh && \
    ./scripts/security-check.sh

# 构建应用
ARG NEXT_PUBLIC_DEPLOYMENT_ENV=preview
ARG NEXT_PUBLIC_DOMAIN=urlchecker.dev

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_PUBLIC_DEPLOYMENT_ENV=${NEXT_PUBLIC_DEPLOYMENT_ENV}
ENV NEXT_PUBLIC_DOMAIN=${NEXT_PUBLIC_DOMAIN}

ENV NODE_OPTIONS="--max-old-space-size=2048"
RUN npm run build

# 生产运行阶段
FROM alpine:3.19 AS runner

# 安装必要的运行时依赖
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    bash \
    # Chromium for Puppeteer
    chromium \
    nss \
    freetype \
    harfbuzz \
    ttf-freefont \
    && rm -rf /var/cache/apk/*

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# 复制 Go 应用
COPY --from=go-builder /go/src/app/main ./main
COPY --from=go-builder /go/src/app/resource ./resource

# 复制 Next.js 生产依赖
COPY --from=deps /app/node_modules ./node_modules

# 复制 Next.js 构建产物
COPY --from=builder --chown=appuser:appgroup /app/.next/standalone ./
COPY --from=builder --chown=appuser:appgroup /app/.next/static ./.next/static
COPY --from=builder --chown=appuser:appgroup /app/public ./public

# 复制 Prisma 文件和脚本
COPY --from=builder --chown=appuser:appgroup /app/prisma ./prisma
COPY --from=builder --chown=appuser:appgroup /app/package.json ./
COPY --from=builder --chown=appuser:appgroup /app/scripts ./scripts

# 确保正确的文件权限
RUN chown -R appuser:appgroup /app && \
    chmod +x ./main && \
    chmod +x ./scripts/optimized-start.sh

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV GO_ENV=production
ENV GO_APP_PORT=8080

# Puppeteer/Chrome 代理相关环境变量
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# 内存优化配置
ENV NODE_OPTIONS="--max-old-space-size=2048 --max-semi-space-size=128"
ENV GOGC=25

# 禁用运行时Prisma生成
ENV PRISMA_GENERATE_SKIP_RUNTIME=true

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 8888

# 健康检查指向 Go 服务
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8888/api/health || exit 1

# 直接启动 Go 服务（API + 静态回退）
CMD ["./main", "-host", "0.0.0.0", "-port", "8888"]
