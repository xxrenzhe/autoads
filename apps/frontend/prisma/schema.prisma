
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- Event Sourcing Core Table ---
model Event {
  id            String   @id @default(cuid())
  aggregateId   String
  aggregateType String
  eventType     String
  payload       Json
  version       Int
  createdAt     DateTime @default(now())

  @@index([aggregateId, aggregateType])
  @@index([eventType])
}

// --- Read Models (Projections) ---

// --- Core Entities ---
model User {
  id                      String    @id
  email                   String    @unique
  name                    String?
  role                    String    @default("USER") // "USER" or "ADMIN"
  createdAt               DateTime
  lastLoginAt             DateTime?
  notificationPreferences Json?

  // Relation Projections
  subscription      Subscription?
  tokens            UserToken?
  workflows         UserWorkflowProgress[]
  checklistProgress UserChecklistProgress[]
  notifications     Notification[]
  offers            Offer[]
  batchopenTasks    BatchopenTask[]
  siterankAnalyses  SiterankAnalysis[]
  adscenterCampaigns AdscenterCampaign[]
  checkIns          CheckIn[]
  tokenTransactions TokenTransaction[]
}

model Subscription {
  id                 String    @id
  userId             String    @unique
  planId             String
  planName           String    // e.g., "Pro", "Max"
  status             String    // "trialing", "active", "canceled"
  trialEndsAt        DateTime?
  currentPeriodEnd   DateTime
  stripeCustomerId   String?

  user User @relation(fields: [userId], references: [id])
}

model UserToken {
  userId    String   @id
  balance   BigInt
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id])
  transactions TokenTransaction[]
}

// --- New Models for CheckIn and Token Transactions ---
model CheckIn {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  tokens    Int
  streak    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
}

model TokenTransaction {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "ACTIVITY", "PURCHASE", "USAGE"
  amount        Int
  balanceBefore BigInt
  balanceAfter  BigInt
  source        String   // e.g., "daily_check_in", "siterank_query"
  description   String
  metadata      Json?
  createdAt     DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  userToken UserToken @relation(fields: [userId], references: [id])

  @@index([userId])
}


// --- Global Offer Library ---
model Offer {
  id            String   @id
  userId        String
  name          String
  originalUrl   String
  status        String   // "evaluating", "optimizing", "scaling", "archived"
  siterankScore Float?
  createdAt     DateTime

  user             User               @relation(fields: [userId], references: [id])
  batchopenTasks   BatchopenTask[]
  siterankAnalysis SiterankAnalysis?

  @@index([userId])
}

// --- Workflow & Onboarding ---
model WorkflowTemplate {
  id          String @id
  name        String @unique
  description String
  steps       Json

  userWorkflows UserWorkflowProgress[]
}

model UserWorkflowProgress {
  id          String @id
  userId      String
  templateId  String
  currentStep Int
  status      String // "in_progress", "completed"
  context     Json?

  user     User             @relation(fields: [userId], references: [id])
  template WorkflowTemplate @relation(fields: [templateId], references: [id])

  @@index([userId])
}

model OnboardingChecklist {
  id           String @id
  step         Int    @unique
  title        String
  description  String
  targetUrl    String
  rewardTokens Int

  userProgress UserChecklistProgress[]
}

model UserChecklistProgress {
  id          String    @id
  userId      String
  stepId      String
  isCompleted Boolean
  completedAt DateTime?

  user User                @relation(fields: [userId], references: [id])
  step OnboardingChecklist @relation(fields: [stepId], references: [id])

  @@unique([userId, stepId])
}

// --- Notification System ---
model Notification {
  id        String   @id
  userId    String
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// --- Feature Module Read Models ---
model BatchopenTask {
  id               String   @id
  userId           String
  offerId          String
  simulationConfig Json
  status           String   // "queued", "running", "completed", "failed"
  progress         Float    @default(0)
  createdAt        DateTime

  user  User  @relation(fields: [userId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id])

  @@index([userId, offerId])
}

model SiterankAnalysis {
  id        String   @id
  userId    String
  offerId   String   @unique
  status    String   // "pending", "completed", "failed"
  result    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id])

  @@index([userId])
}

model AdscenterCampaign {
  id        String   @id
  userId    String
  offerId   String
  status    String   // "running", "paused", "completed"
  config    Json
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, offerId])
}
