/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/parse-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Parse URL and extract hostname and brand */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            hostname?: string;
                            brand?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check URL availability via HTTP HEAD/GET */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        url: string;
                        timeoutMs?: number;
                        /** @enum {string} */
                        method?: "HEAD" | "GET";
                        fingerprint?: {
                            locale?: string;
                            timezoneId?: string;
                            viewport?: {
                                width?: number;
                                height?: number;
                            };
                            geolocation?: {
                                latitude?: number;
                                longitude?: number;
                                accuracy?: number;
                            };
                            /** @enum {string} */
                            colorScheme?: "light" | "dark" | "no-preference";
                            userAgent?: string;
                        };
                        proxy?: {
                            server?: string;
                            username?: string;
                            password?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            status?: number;
                            /** @enum {string} */
                            engine?: "playwright" | "fetch";
                            timings?: {
                                navMs?: number;
                                clickMs?: number;
                            };
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate-click": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simulate click (queued) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        url: string;
                        /** @description CSS selector to click first */
                        selector?: string;
                        wait?: {
                            /** @enum {string} */
                            until?: "domcontentloaded" | "networkidle" | "selector";
                            selector?: string;
                            timeoutMs?: number;
                        };
                        /** @description Wait after click (ms) */
                        dwellMs?: number;
                        fingerprint?: components["schemas"]["Fingerprint"];
                        proxy?: components["schemas"]["Proxy"];
                    };
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            taskId?: string;
                            status?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch-execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit tasks for batch execution (queued) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tasks?: {
                            url: string;
                            fingerprint?: components["schemas"]["Fingerprint"];
                            proxy?: components["schemas"]["Proxy"];
                        }[];
                        concurrency?: number;
                    };
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            accepted?: number;
                            taskGroupId?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get task status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "queued" | "running" | "completed" | "failed";
                            result?: Record<string, never>;
                            error?: string;
                            groupId?: string;
                        };
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Fingerprint: {
            locale?: string;
            timezoneId?: string;
            viewport?: {
                width?: number;
                height?: number;
            };
            geolocation?: {
                latitude?: number;
                longitude?: number;
                accuracy?: number;
            };
            /** @enum {string} */
            colorScheme?: "light" | "dark" | "no-preference";
            userAgent?: string;
        };
        Proxy: {
            server?: string;
            username?: string;
            password?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
