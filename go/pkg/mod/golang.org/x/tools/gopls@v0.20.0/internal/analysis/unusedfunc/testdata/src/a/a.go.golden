package a

func main() {
	_ = live
}

// -- functions --

func Exported() {}

func live() {}

//go:linkname foo
func apparentlyDeadButHasPrecedingLinknameComment() {}

// -- methods --

type ExportedType int
type unexportedType int

func (ExportedType) Exported()   {}
func (unexportedType) Exported() {}

func (x ExportedType) dynamic() {} // matches name of interface method => live

type _ interface{ dynamic() }


// -- types without methods --

type ExportedType2 int

// want `type "unusedUnexportedType2" is unused`

type (
	one int
)

// -- generic methods --

type g[T any] int

// want `method "method" is unused`

// -- constants --

// want `const "unusedConst" is unused`

const (
	unusedEnum = iota
)

const (
	constOne = 1
)
