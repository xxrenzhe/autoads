# 简化的多环境 Dockerfile for Next.js
# 遵循简单实用原则，支持2C4G环境

FROM node:22-alpine AS base

# 安装必要的系统依赖
RUN apk add --no-cache \
    libc6-compat \
    curl \
    bash \
    # Chrome dependencies for Puppeteer
    chromium \
    nss \
    freetype \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 依赖安装阶段
FROM base AS deps

# 复制依赖文件
COPY package.json package-lock.json ./

# 优化npm配置以加速安装
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true && \
    npm config set maxsockets 20

# 安装生产依赖（内存优化）
ENV NODE_OPTIONS="--max-old-space-size=1024"
RUN npm ci --only=production --no-audit --no-fund --prefer-offline

# 构建阶段
FROM base AS builder

# 优化npm配置
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true && \
    npm config set maxsockets 20

# 安装所有依赖（包括devDependencies用于构建）
COPY package.json package-lock.json ./
RUN npm ci --no-audit --no-fund --prefer-offline

# 先复制Prisma schema以利用缓存
COPY prisma ./prisma

# 生成 Prisma 客户端（利用缓存）
RUN npx prisma generate

# 复制源代码（放在Prisma之后以优化缓存）
COPY . .

# 运行安全检查（简单实用原则）
RUN echo "🔍 运行安全检查..." && \
    chmod +x scripts/security-check.sh && \
    ./scripts/security-check.sh

# 配置系统优化部署
# 注意：构建阶段执行迁移需要数据库连接，仅在 CI/CD 环境中执行
ARG RUN_CONFIG_MIGRATION=false

RUN if [ "$RUN_CONFIG_MIGRATION" = "true" ]; then \
    echo "🚀 开始配置系统优化部署..." && \
    # 检查数据库连接 \
    if [ -n "$DATABASE_URL" ]; then \
        echo "🗄️ 执行数据库迁移..." && \
        # 首先尝试迁移，失败则使用 db push \
        npx prisma migrate deploy || npx prisma db push --accept-data-loss && \
        echo "📋 执行配置数据迁移..." && \
        npx tsx scripts/migrate-configs.ts && \
        echo "✅ 配置系统优化部署完成"; \
    else \
        echo "⚠️  DATABASE_URL未设置，跳过构建时迁移"; \
        echo "💡 迁移将在容器启动时自动执行"; \
    fi; \
else \
    echo "ℹ️  构建时跳过配置迁移（RUN_CONFIG_MIGRATION=false）"; \
    echo "💡 迁移将在容器启动时自动执行"; \
fi

# 构建应用（支持多环境）
ARG NEXT_PUBLIC_DEPLOYMENT_ENV=preview
ARG NEXT_PUBLIC_DOMAIN=urlchecker.dev

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_PUBLIC_DEPLOYMENT_ENV=${NEXT_PUBLIC_DEPLOYMENT_ENV}
ENV NEXT_PUBLIC_DOMAIN=${NEXT_PUBLIC_DOMAIN}

# 构建阶段需要更多内存
ENV NODE_OPTIONS="--max-old-space-size=2048"

RUN npm run build

# 生产运行阶段
FROM base AS runner

# 安装sudo并创建非root用户
RUN apk add --no-cache sudo && \
    addgroup -g 1001 -S nodejs && \
    adduser -u 1001 -S nextjs -G nodejs && \
    echo "nextjs ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

WORKDIR /app

# 复制生产依赖
COPY --from=deps /app/node_modules ./node_modules

# 确保node_modules目录有正确的权限
RUN chown -R nextjs:nodejs /app/node_modules

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# 复制 Prisma 文件和脚本
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# 设置环境变量（2C4G优化）
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
# Puppeteer/Chrome 代理相关环境变量
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# 内存优化配置
# 4G容器: 2048MB堆内存 (50%规则)
# 2G容器: 1024MB堆内存 (50%规则)  
ENV NODE_OPTIONS="--max-old-space-size=2048 --max-semi-space-size=128"
ENV MEMORY_OPTIMIZED=true

# 禁用运行时Prisma生成（使用构建时生成的客户端）
ENV PRISMA_GENERATE_SKIP_RUNTIME=true

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

# 简化的健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# 使用优化的启动脚本
CMD ["./scripts/optimized-start.sh"]