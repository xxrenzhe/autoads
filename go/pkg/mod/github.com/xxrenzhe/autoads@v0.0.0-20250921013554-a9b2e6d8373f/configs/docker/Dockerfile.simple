# AutoAds 简化版 Dockerfile
# 用于测试构建流程

# 构建阶段 1: 构建前端
FROM node:20-alpine AS frontend-builder

# 安装必要的系统依赖
RUN apk add --no-cache git build-base tzdata

WORKDIR /app

# 复制 package 文件
COPY package.json ./
COPY apps/frontend/package.json ./apps/frontend/

# 安装依赖
RUN npm install

# 复制源代码
COPY . .

# 构建前端
RUN cd apps/frontend && npm run build

# 构建阶段 2: 构建 Go 后端
FROM golang:1.23-alpine AS backend-builder

# 安装必要的系统依赖
RUN apk add --no-cache git build-base tzdata

WORKDIR /app

# 复制 Go 源代码（包括本地依赖）
COPY gofly_admin_v3/ ./

# 下载依赖并同步 vendor 目录
RUN go mod download && go mod vendor

# 构建 Go 应用（使用标签禁用 web 嵌入）
RUN CGO_ENABLED=0 GOOS=linux go build -tags=!webembed -mod=vendor -o main cmd/server/main.go

# 生产运行阶段
FROM alpine:3.19 AS runner

# 安装必要的运行时依赖
RUN apk add --no-cache ca-certificates tzdata curl bash

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# 复制 Go 应用
COPY --from=backend-builder /app/main ./main
COPY --from=backend-builder /app/resource ./resource

# 复制 Next.js 构建产物
COPY --from=frontend-builder --chown=appuser:appgroup /app/apps/frontend/.next/standalone ./
COPY --from=frontend-builder --chown=appuser:appgroup /app/apps/frontend/.next/static ./.next/static
COPY --from=frontend-builder --chown=appuser:appgroup /app/apps/frontend/public ./public

# 确保正确的文件权限
RUN chown -R appuser:appgroup /app && \
    chmod +x ./main

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV GO_ENV=production

# 切换到非root用户
USER appuser

# 暴露端口
EXPOSE 8888

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8888/api/health || exit 1

# 启动应用
CMD ["./main"]