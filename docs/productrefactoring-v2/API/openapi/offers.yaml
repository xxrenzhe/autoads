openapi: 3.0.3
info:
  title: offers-service
  version: 0.1.0
servers:
  - url: https://offers.example.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Unauthorized
    ForbiddenError:
      description: Forbidden
  schemas:
    Offer:
      type: object
      required: [id, name, originalUrl, status]
      properties:
        id: { type: string }
        name: { type: string }
        originalUrl: { type: string, format: uri }
        status: { type: string, enum: [evaluating, optimizing, scaling, profitable, abandoned] }
        siterankScore: { type: number, format: float }
    ErrorResponse:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object }
    OfferList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Offer' }
        nextPageToken: { type: string }
security:
  - bearerAuth: []
paths:
  /api/v1/offers:
    get:
      summary: List offers
      parameters:
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
        - in: query
          name: pageToken
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OfferList' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    post:
      summary: Create offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, originalUrl]
              properties:
                name: { type: string }
                originalUrl: { type: string, format: uri }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Offer' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
  /api/v1/offers/{id}:
    get:
      summary: Get offer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Offer' } } } }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
    patch:
      summary: Update offer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
