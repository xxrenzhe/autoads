// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get latest brand coverage metrics for account/seed
	// (GET /recommend/brand-coverage)
	GetBrandCoverage(w http.ResponseWriter, r *http.Request, params GetBrandCoverageParams)
	// Compute brand coverage for planned keywords (no Ads API, accuracy-first)
	// (POST /recommend/brand-coverage/planned)
	GetPlannedBrandCoverage(w http.ResponseWriter, r *http.Request)
	// Trigger offline brand audit for keywords (BigQuery-aware)
	// (POST /recommend/internal/offline/brand-audit)
	OfflineBrandAudit(w http.ResponseWriter, r *http.Request)
	// Trigger offline brand coverage audit (ensure keywords include brand terms)
	// (POST /recommend/internal/offline/brand-coverage-audit)
	OfflineBrandCoverageAudit(w http.ResponseWriter, r *http.Request)
	// Check keywords for brand-term risk
	// (POST /recommend/keywords/brand-check)
	BrandCheck(w http.ResponseWriter, r *http.Request)
	// Get brand profile (aliases) by seedDomain
	// (GET /recommend/keywords/brand-profile)
	GetBrandProfile(w http.ResponseWriter, r *http.Request, params GetBrandProfileParams)
	// List keyword brand risk results by seedDomain
	// (GET /recommend/keywords/brand-results)
	ListBrandResults(w http.ResponseWriter, r *http.Request, params ListBrandResultsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get latest brand coverage metrics for account/seed
// (GET /recommend/brand-coverage)
func (_ Unimplemented) GetBrandCoverage(w http.ResponseWriter, r *http.Request, params GetBrandCoverageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Compute brand coverage for planned keywords (no Ads API, accuracy-first)
// (POST /recommend/brand-coverage/planned)
func (_ Unimplemented) GetPlannedBrandCoverage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Trigger offline brand audit for keywords (BigQuery-aware)
// (POST /recommend/internal/offline/brand-audit)
func (_ Unimplemented) OfflineBrandAudit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Trigger offline brand coverage audit (ensure keywords include brand terms)
// (POST /recommend/internal/offline/brand-coverage-audit)
func (_ Unimplemented) OfflineBrandCoverageAudit(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check keywords for brand-term risk
// (POST /recommend/keywords/brand-check)
func (_ Unimplemented) BrandCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get brand profile (aliases) by seedDomain
// (GET /recommend/keywords/brand-profile)
func (_ Unimplemented) GetBrandProfile(w http.ResponseWriter, r *http.Request, params GetBrandProfileParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List keyword brand risk results by seedDomain
// (GET /recommend/keywords/brand-results)
func (_ Unimplemented) ListBrandResults(w http.ResponseWriter, r *http.Request, params ListBrandResultsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetBrandCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetBrandCoverage(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBrandCoverageParams

	// ------------- Required query parameter "seedDomain" -------------

	if paramValue := r.URL.Query().Get("seedDomain"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "seedDomain"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "seedDomain", r.URL.Query(), &params.SeedDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seedDomain", Err: err})
		return
	}

	// ------------- Required query parameter "accountId" -------------

	if paramValue := r.URL.Query().Get("accountId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "accountId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBrandCoverage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlannedBrandCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetPlannedBrandCoverage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlannedBrandCoverage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OfflineBrandAudit operation middleware
func (siw *ServerInterfaceWrapper) OfflineBrandAudit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OfflineBrandAudit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OfflineBrandCoverageAudit operation middleware
func (siw *ServerInterfaceWrapper) OfflineBrandCoverageAudit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OfflineBrandCoverageAudit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// BrandCheck operation middleware
func (siw *ServerInterfaceWrapper) BrandCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BrandCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBrandProfile operation middleware
func (siw *ServerInterfaceWrapper) GetBrandProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBrandProfileParams

	// ------------- Required query parameter "seedDomain" -------------

	if paramValue := r.URL.Query().Get("seedDomain"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "seedDomain"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "seedDomain", r.URL.Query(), &params.SeedDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seedDomain", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBrandProfile(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBrandResults operation middleware
func (siw *ServerInterfaceWrapper) ListBrandResults(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBrandResultsParams

	// ------------- Required query parameter "seedDomain" -------------

	if paramValue := r.URL.Query().Get("seedDomain"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "seedDomain"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "seedDomain", r.URL.Query(), &params.SeedDomain)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "seedDomain", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", r.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "severity", Err: err})
		return
	}

	// ------------- Optional query parameter "containsBrand" -------------

	err = runtime.BindQueryParameter("form", true, false, "containsBrand", r.URL.Query(), &params.ContainsBrand)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "containsBrand", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBrandResults(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recommend/brand-coverage", wrapper.GetBrandCoverage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recommend/brand-coverage/planned", wrapper.GetPlannedBrandCoverage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recommend/internal/offline/brand-audit", wrapper.OfflineBrandAudit)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recommend/internal/offline/brand-coverage-audit", wrapper.OfflineBrandCoverageAudit)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recommend/keywords/brand-check", wrapper.BrandCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recommend/keywords/brand-profile", wrapper.GetBrandProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recommend/keywords/brand-results", wrapper.ListBrandResults)
	})

	return r
}
