"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3091],{13091:(e,t,i)=>{i.d(t,{globalDatabaseService:()=>c});var s=i(42772),a=i(61866),r=i(69669);let n=(0,a.KV)("LocalDatabaseService");class o{async getAllKeys(e){var t;await this.ensureInitialized();let i=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig"),s=await this.promisifyRequest(i.getAll());return null==s||null==(t=s.filter(Boolean))?void 0:t.map(e=>e.key)}async getItem(e,t,i){await this.ensureInitialized();let s=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig"),a=await this.promisifyRequest(s.get("config_".concat(e)));return a?a.value:t||null}async initialize(){if(!this.isInitialized){if("undefined"==typeof indexedDB){n.debug("非浏览器环境，跳过数据库初始化"),this.isInitialized=!0;return}try{this.db=await this.openDatabase(),this.isInitialized=!0,n.info("本地数据库初始化完成",{name:this.dbName,version:this.dbVersion})}catch(e){throw n.error("数据库初始化失败",new r.$W("数据库初始化失败",{error:e instanceof Error?e.message:String(e)})),e}}}openDatabase(){return new Promise((e,t)=>{let i=indexedDB.open(this.dbName,this.dbVersion);i.onerror=()=>{t(Error("无法打开数据库"))},i.onsuccess=()=>{e(i.result)},i.onupgradeneeded=e=>{let t=e.target.result;this.createStores(t)}})}createStores(e){Object.entries(this.dbConfig.stores).forEach(t=>{let[i,s]=t;if(!e.objectStoreNames.contains(i)){let t=e.createObjectStore(i,{keyPath:s.keyPath});s.indexes&&Object.entries(s.indexes).forEach(e=>{let[i,s]=e;t.createIndex(i,s,{unique:!1})}),n.debug("创建数据存储: ".concat(i))}})}async saveAdPerformanceData(e){var t;await this.ensureInitialized();let i=this.db.transaction(["adPerformance"],"readwrite").objectStore("adPerformance"),s=null==e||null==(t=e.filter(Boolean))?void 0:t.map(e=>{let t={...e,updatedAt:new Date};return this.promisifyRequest(i.put(t))});await Promise.all(s),n.info("保存广告数据: ".concat(e.length," 条记录"))}async getAdPerformanceData(e,t,i){await this.ensureInitialized();let s=this.db.transaction(["adPerformance"],"readonly").objectStore("adPerformance").index("date"),a=IDBKeyRange.bound(e,t),r=s.getAll(a),n=await this.promisifyRequest(r);return i&&i.length>0?n.filter(e=>i.includes(e.accountId)):n}async getLatestDataDate(){await this.ensureInitialized();let e=this.db.transaction(["adPerformance"],"readonly").objectStore("adPerformance").index("date").openCursor(null,"prev"),t=await this.promisifyRequest(e);return t?t.value.date:null}async saveConfig(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"system";await this.ensureInitialized();let s={id:"config_".concat(e),key:e,value:t,category:i,encrypted:!1,createdAt:new Date,updatedAt:new Date},a=this.db.transaction(["systemConfig"],"readwrite").objectStore("systemConfig");await this.promisifyRequest(a.put(s)),n.debug("保存配置: ".concat(e))}async getConfig(e){await this.ensureInitialized();let t=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig"),i=await this.promisifyRequest(t.get("config_".concat(e)));return i?i.value:null}async getAllConfigs(e){await this.ensureInitialized();let t=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig");if(e){let i=t.index("category");try{return await this.promisifyRequest(i.getAll(e))}catch(e){return console.error(e),[]}}try{return await this.promisifyRequest(t.getAll())}catch(e){return console.error(e),[]}}async saveEmailSubscription(e){await this.ensureInitialized();let t="sub_".concat(Date.now(),"_").concat(Math.random().toString(36).substr(2,9)),i={...e,id:t,createdAt:new Date,updatedAt:new Date},s=this.db.transaction(["emailSubscriptions"],"readwrite").objectStore("emailSubscriptions");return await this.promisifyRequest(s.put(i)),n.info("保存邮件订阅: ".concat(e.email)),t}async getEmailSubscriptions(){await this.ensureInitialized();let e=this.db.transaction(["emailSubscriptions"],"readonly").objectStore("emailSubscriptions");try{return await this.promisifyRequest(e.getAll())}catch(e){return console.error(e),[]}}async updateEmailSubscription(e,t){await this.ensureInitialized();let i=this.db.transaction(["emailSubscriptions"],"readwrite").objectStore("emailSubscriptions"),s=await this.promisifyRequest(i.get(e));if(!s)return Promise.resolve(!1);let a={...s,...t,updatedAt:new Date};return await this.promisifyRequest(i.put(a)),Promise.resolve(!0)}async deleteEmailSubscription(e){await this.ensureInitialized();let t=this.db.transaction(["emailSubscriptions"],"readwrite").objectStore("emailSubscriptions");return await this.promisifyRequest(t.get(e))?(await this.promisifyRequest(t.delete(e)),Promise.resolve(!0)):Promise.resolve(!1)}async deleteConfig(e){await this.ensureInitialized();let t=this.db.transaction(["systemConfig"],"readwrite").objectStore("systemConfig");await this.promisifyRequest(t.delete("config_".concat(e))),n.debug("删除配置: ".concat(e))}async saveSystemMetrics(e){var t;await this.ensureInitialized();let i=this.db.transaction(["systemMetrics"],"readwrite").objectStore("systemMetrics"),s=null==e||null==(t=e.filter(Boolean))?void 0:t.map(e=>{let t={...e,id:"metric_".concat(Date.now(),"_").concat(Math.random().toString(36).substr(2,9))};return this.promisifyRequest(i.put(t))});await Promise.all(s)}async getSystemMetrics(e,t,i){let s;await this.ensureInitialized();let a=this.db.transaction(["systemMetrics"],"readonly").objectStore("systemMetrics");s=e?a.index("metricType").getAll(e):a.getAll();let r=await this.promisifyRequest(s);return t||i?r.filter(e=>{let s=new Date(e.timestamp);return t&&s<t||i&&s>i?Promise.resolve(!1):Promise.resolve(!0)}):r}async cleanupOldData(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:90;await this.ensureInitialized();let t=new Date;t.setDate(t.getDate()-e);let i=this.db.transaction(["adPerformance"],"readwrite").objectStore("adPerformance").index("date"),s=IDBKeyRange.upperBound(t.toISOString().split("T")[0]),a=i.openCursor(s),r=0;a.onsuccess=e=>{let t=e.target.result;t&&(t.delete(),r++,t.continue())};let o=this.db.transaction(["systemMetrics"],"readwrite").objectStore("systemMetrics").index("timestamp"),c=IDBKeyRange.upperBound(t),l=o.openCursor(c),d=0;l.onsuccess=e=>{let t=e.target.result;t&&(t.delete(),d++,t.continue())},n.info("数据清理完成",{deletedAdRecords:r,deletedMetricsRecords:d,daysToKeep:e})}async exportData(){await this.ensureInitialized();let[e,t,i]=await Promise.all([this.promisifyRequest(this.db.transaction(["adPerformance"],"readonly").objectStore("adPerformance").getAll()),this.promisifyRequest(this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig").getAll()),this.promisifyRequest(this.db.transaction(["emailSubscriptions"],"readonly").objectStore("emailSubscriptions").getAll())]);return{adPerformance:e,systemConfig:t,emailSubscriptions:i,exportTime:new Date}}async importData(e){await this.ensureInitialized();let t=[];if(e.adPerformance&&t.push(this.saveAdPerformanceData(e.adPerformance)),e.systemConfig){let i=this.db.transaction(["systemConfig"],"readwrite").objectStore("systemConfig");e.systemConfig.forEach(e=>{t.push(this.promisifyRequest(i.put(e)))})}if(e.emailSubscriptions){let i=this.db.transaction(["emailSubscriptions"],"readwrite").objectStore("emailSubscriptions");e.emailSubscriptions.forEach(e=>{t.push(this.promisifyRequest(i.put(e)))})}await Promise.all(t),n.info("数据导入完成")}async getDatabaseStats(){await this.ensureInitialized();let[e,t,i,s]=await Promise.all([this.getRecordCount("adPerformance"),this.getRecordCount("systemConfig"),this.getRecordCount("emailSubscriptions"),this.getRecordCount("systemMetrics")]);return{adPerformanceCount:e,systemConfigCount:t,emailSubscriptionsCount:i,systemMetricsCount:s,databaseSize:500*e+200*t+300*i+150*s}}async ensureInitialized(){if(this.isInitialized||await this.initialize(),"undefined"==typeof indexedDB||!this.db)throw Error("数据库服务仅在浏览器环境中可用")}promisifyRequest(e){return new Promise((t,i)=>{e.onsuccess=()=>t(e.result),e.onerror=()=>i(e.error)})}async getRecordCount(e){let t=this.db.transaction([e],"readonly").objectStore(e);try{return await this.promisifyRequest(t.count())}catch(e){return console.error(e),0}}close(){this.db&&(this.db.close(),this.db=null,this.isInitialized=!1,n.info("数据库连接已关闭"))}constructor(){(0,s._)(this,"db",null),(0,s._)(this,"dbName","AdsCenter_LocalDB"),(0,s._)(this,"dbVersion",1),(0,s._)(this,"isInitialized",!1),(0,s._)(this,"dbConfig",{name:this.dbName,version:this.dbVersion,stores:{adPerformance:{keyPath:"id",indexes:{accountId:"accountId",date:"date",campaignId:"campaignId",adId:"adId",dateAccount:["date","accountId"]}},systemConfig:{keyPath:"id",indexes:{key:"key",category:"category"}},emailSubscriptions:{keyPath:"id",indexes:{email:"email",isActive:"isActive"}},systemMetrics:{keyPath:"id",indexes:{timestamp:"timestamp",metricType:"metricType",metricName:"metricName"}},executionHistory:{keyPath:"id",indexes:{timestamp:"timestamp",status:"status",type:"type"}}}}),this.initialize()}}let c=new o}}]);