openapi: 3.0.3
info:
  title: Recommendations Service
  version: 0.1.0
servers:
  - url: /api/v1
paths:
  /recommend/keywords/brand-check:
    post:
      operationId: brandCheck
      summary: Check keywords for brand-term risk
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seedDomain: { type: string }
                keywords:
                  type: array
                  items: { type: string }
                locale: { type: string }
                landingUrl: { type: string, description: Optional landing page URL to extract brand signals }
              required: [seedDomain, keywords]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/BrandCheckItem'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /recommend/internal/offline/brand-audit:
    post:
      operationId: offlineBrandAudit
      summary: Trigger offline brand audit for keywords (BigQuery-aware)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seedDomain: { type: string }
                accountId: { type: string }
                keywords:
                  type: array
                  items: { type: string }
                days: { type: integer, default: 30 }
                limit: { type: integer, default: 1000 }
                shard: { type: integer, description: optional shard index (0-based) }
                totalShards: { type: integer, description: optional shard count (>0) }
              required: [seedDomain]
      responses:
        '202': { description: Accepted }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /recommend/internal/offline/brand-coverage-audit:
    post:
      operationId: offlineBrandCoverageAudit
      summary: Trigger offline brand coverage audit (ensure keywords include brand terms)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seedDomain: { type: string }
                accountId: { type: string }
                days: { type: integer, default: 30 }
                shard: { type: integer }
                totalShards: { type: integer }
              required: [seedDomain]
      responses:
        '202': { description: Accepted }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /recommend/brand-coverage:
    get:
      operationId: getBrandCoverage
      summary: Get latest brand coverage metrics for account/seed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: seedDomain
          required: true
          schema: { type: string }
        - in: query
          name: accountId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCoverageResult'
        '401': { description: Unauthorized }
        '404': { description: Not Found }

  /recommend/brand-coverage/planned:
    post:
      operationId: getPlannedBrandCoverage
      summary: Compute brand coverage for planned keywords (no Ads API, accuracy-first)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seedDomain: { type: string }
                keywords:
                  type: array
                  items: { type: string }
              required: [seedDomain, keywords]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCoverageResult'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }


  /recommend/keywords/brand-profile:
    get:
      operationId: getBrandProfile
      summary: Get brand profile (aliases) by seedDomain
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: seedDomain
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  seedDomain: { type: string }
                  aliases:
                    type: array
                    items: { type: string }
                  updatedAt: { type: string, format: date-time }
        '401': { description: Unauthorized }

  /recommend/keywords/brand-results:
    get:
      operationId: listBrandResults
      summary: List keyword brand risk results by seedDomain
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: seedDomain
          required: true
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 50, minimum: 1, maximum: 500 }
        - in: query
          name: cursor
          required: false
          schema: { type: string, description: opaque cursor (last id) }
        - in: query
          name: severity
          required: false
          schema:
            type: string
            enum: [error, warn, none]
        - in: query
          name: containsBrand
          required: false
          schema: { type: boolean }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/BrandCheckItem'
                  next: { type: string }
        '401': { description: Unauthorized }

  /recommend/opportunities:
    get:
      operationId: listOpportunities
      summary: List recent opportunities for current user
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1, maximum: 50, default: 50 }
        - in: query
          name: cursor
          required: false
          schema: { type: string, description: opaque next cursor (id) }
        - in: query
          name: seedDomain
          required: false
          schema: { type: string, description: seed domain filter (ILIKE) }
        - in: query
          name: country
          required: false
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/OpportunityItem' }
                  next: { type: string, description: next cursor for pagination }
    post:
      operationId: createOpportunity
      summary: Create an opportunity from discovery results
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpportunityCreateRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer, format: int64 }
                  status: { type: string }
  /recommend/opportunities/{id}:
    get:
      operationId: getOpportunity
      summary: Get opportunity detail
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Opportunity' }
        '404': { description: Not Found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BrandCheckItem:
      type: object
      properties:
        keyword: { type: string }
        containsBrand: { type: boolean }
        matchedAlias: { type: string }
        method: { type: string, enum: [exact, fuzzy, none] }
        score: { type: number }
        severity: { type: string, enum: [error, warn, none] }
      required: [keyword, containsBrand, method, severity]
    BrandCoverageResult:
      type: object
      properties:
        seedDomain: { type: string }
        accountId: { type: string }
        totalKeywords: { type: integer }
        brandKeywords: { type: integer }
        coverageRatio: { type: number }
        missingAliases:
          type: array
          items: { type: string }
        updatedAt: { type: string, format: date-time }
      required: [seedDomain, accountId, totalKeywords, brandKeywords, coverageRatio]
    OpportunityCreateRequest:
      type: object
      properties:
        seedDomain: { type: string }
        country: { type: string }
        seedKeywords:
          type: array
          items: { type: string }
        topKeywords:
          type: array
          items:
            type: object
            properties:
              keyword: { type: string }
              score: { type: number }
              reason: { type: string }
        topDomains:
          type: array
          items:
            type: object
            properties:
              domain: { type: string }
              score: { type: number }
        meta:
          type: object
          additionalProperties: true
      required: [seedDomain]
    OpportunityItem:
      type: object
      properties:
        id: { type: integer, format: int64 }
        seedDomain: { type: string }
        country: { type: string }
        summary: { type: string, description: human-readable reason summary }
        createdAt: { type: string, format: date-time }
    Opportunity:
      allOf:
        - $ref: '#/components/schemas/OpportunityItem'
        - type: object
          properties:
            seedKeywords:
              type: array
              items: { type: string }
            topKeywords:
              type: array
              items:
                type: object
                properties:
                  keyword: { type: string }
                  score: { type: number }
                  reason: { type: string }
            topDomains:
              type: array
              items:
                type: object
                properties:
                  domain: { type: string }
                  score: { type: number }
            meta:
              type: object
              additionalProperties: true
